.ORIG X4190
TriangleInequality:

	; Your code here. Remember to save the registers that you will use to subroutine-specific labels, and then load them just before the RET command.			
	; Registers backup
	ST R0 R0_SAVE_TRIANGLEINEQUALITY
	ST R1 R1_SAVE_TRIANGLEINEQUALITY
	ST R2 R2_SAVE_TRIANGLEINEQUALITY
	ST R4 R4_SAVE_TRIANGLEINEQUALITY
	ST R5 R5_SAVE_TRIANGLEINEQUALITY
	ST R6 R6_SAVE_TRIANGLEINEQUALITY
	ST R7 R7_SAVE_TRIANGLEINEQUALITY

	; Checking if the invalid input
	AND R3  R3  #0
	ADD R3  R3  #1
	NOT R3  R3
	ADD R3  R3  #1
	ADD R0  R0  #0
	BRn TRIANGLE_EXIT
	ADD R1  R1  #0
	BRn TRIANGLE_EXIT
	ADD R2  R2  #0
	BRn TRIANGLE_EXIT

	; Checking inequality
	AND R3  R3 #0
	NOT R4  R0
	ADD R4  R4  #1
	ADD R5  R4  R1
	ADD R5  R5  R2
	BRn TRIANGLE_EXIT

	NOT R6 R1
	ADD R6  R6  #1
	ADD R5  R4  R6
	ADD R5  R5  R2
	BRp TRIANGLE_EXIT

	ADD R5  R0  R2
	ADD R5  R5  R6
	BRn TRIANGLE_EXIT

	; The inequality is available
	ADD R3  R3  #1

	TRIANGLE_EXIT

	; Registers backup
	LD R0 R0_SAVE_TRIANGLEINEQUALITY
	LD R1 R1_SAVE_TRIANGLEINEQUALITY
	LD R2 R2_SAVE_TRIANGLEINEQUALITY
	LD R4 R4_SAVE_TRIANGLEINEQUALITY
	LD R5 R5_SAVE_TRIANGLEINEQUALITY
	LD R6 R6_SAVE_TRIANGLEINEQUALITY
	LD R7 R7_SAVE_TRIANGLEINEQUALITY

RET
; Put your various labels here, between RET and .END.
R0 R0_SAVE_TRIANGLEINEQUALITY .fill #0
R1 R1_SAVE_TRIANGLEINEQUALITY .fill #0
R2 R2_SAVE_TRIANGLEINEQUALITY .fill #0
R4 R4_SAVE_TRIANGLEINEQUALITY .fill #0
R5 R5_SAVE_TRIANGLEINEQUALITY .fill #0
R5 R5_SAVE_TRIANGLEINEQUALITY .fill #0
R7 R7_SAVE_TRIANGLEINEQUALITY .fill #0

.END